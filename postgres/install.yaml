- name: Create Postgres Docker volume
  vars:
    volume_name: homelab-postgres-data
  ansible.builtin.import_tasks: ../util/create_docker_volume.yaml
- name: Create Postgres Docker network
  community.docker.docker_network:
    name: homelab-postgres-bootstrap
    state: present
- name: Start Postgres Docker container
  community.docker.docker_container:
    name: homelab-postgres-bootstrap
    image: postgres:latest
    pull: true
    env:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: '{{config.postgres_password}}'
    volumes:
    - homelab-postgres-data:/var/lib/postgresql/data
    - /etc/localtime:/etc/localtime:ro
    networks:
    - name: homelab-postgres-bootstrap
      aliases:
      - postgres
    published_ports:
    - 5432:5432
    auto_remove: true
    keep_volumes: false
    state: started
- name: Wait for Postgres to come online
  ansible.builtin.wait_for:
    host: localhost
    port: 5432
    state: started
- name: Wait an 3 additional seconds before connecting
  ansible.builtin.pause:
    seconds: 3

- name: Create homelab user
  community.postgresql.postgresql_user:
    login_host: localhost
    login_user: postgres
    login_password: '{{config.postgres_password}}'
    login_db: postgres
    name: homelab
    password: '{{config.homelab_postgres_password}}'
    state: present
- name: Create homelab database
  community.postgresql.postgresql_db:
    login_host: localhost
    login_user: postgres
    login_password: '{{config.postgres_password}}'
    maintenance_db: postgres
    name: homelab
    owner: homelab
    state: present
- name: Create hosts table
  community.postgresql.postgresql_table:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    table: hosts
    columns:
    - hostname VARCHAR PRIMARY KEY
    - ip VARCHAR UNIQUE  # No NOT NULL constraint because of client devices (DHCP/non-static IP)
    - mac CHAR(17) UNIQUE
    - alias VARCHAR UNIQUE
    - description VARCHAR
    - location VARCHAR
    owner: homelab
    state: present
- name: Create services table
  community.postgresql.postgresql_table:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    table: services
    columns:
    - name VARCHAR PRIMARY KEY
    - host VARCHAR NOT NULL REFERENCES hosts (hostname) ON UPDATE CASCADE ON DELETE CASCADE
    owner: homelab
    state: present
- name: Create domains table
  community.postgresql.postgresql_table:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    table: domains
    columns:
    - name VARCHAR PRIMARY KEY
    - host VARCHAR NOT NULL REFERENCES hosts (hostname) ON UPDATE CASCADE ON DELETE CASCADE
    owner: homelab
    state: present
- name: Create protocols table
  community.postgresql.postgresql_table:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    table: protocols
    columns:
    - name VARCHAR PRIMARY KEY
    - default_port INTEGER
    owner: homelab
    state: present
- name: Create connections table
  community.postgresql.postgresql_table:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    table: connections
    columns:
    - domain VARCHAR REFERENCES domains (name) ON UPDATE CASCADE
    - port INTEGER
    - protocol VARCHAR NOT NULL REFERENCES protocols (name) ON UPDATE CASCADE
    - service VARCHAR NOT NULL REFERENCES services (name) ON UPDATE CASCADE ON DELETE CASCADE
    - PRIMARY KEY (domain, port)
    owner: homelab
    state: present
- name: Create wireguard schema
  community.postgresql.postgresql_schema:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    name: wireguard
    owner: homelab
    state: present
- name: Create wireguard.hosts table
  community.postgresql.postgresql_table:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    table: wireguard.hosts
    columns:
    - hostname VARCHAR PRIMARY KEY REFERENCES hosts (hostname) ON UPDATE CASCADE ON DELETE CASCADE
    - ip VARCHAR NOT NULL UNIQUE
    - privatekey VARCHAR NOT NULL
    - publickey VARCHAR NOT NULL
    - server BOOLEAN NOT NULL DEFAULT false
    owner: homelab
    state: present
- name: Insert rows into hosts table
  community.postgresql.postgresql_query:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    query: 'INSERT INTO hosts (hostname, ip, mac, alias) VALUES (%s, %s, %s, %s) ON CONFLICT DO NOTHING;'
    positional_args:
    - '{{item.hostname}}'
    - '{{item.ip}}'
    - '{{item.mac}}'
    - '{{item.alias}}'
  with_items:
  - {hostname: '{{ansible_hostname}}', ip: '{{ansible_facts.default_ipv4.address}}', mac: '{{ansible_facts.default_ipv4.macaddress}}', alias: citadel}
- name: Insert rows into services table
  community.postgresql.postgresql_query:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    query: 'INSERT INTO services (name, host) VALUES (%s, %s) ON CONFLICT DO NOTHING;'
    positional_args:
    - '{{item.name}}'
    - '{{item.host}}'
  with_items:
  - {name: unbound, host: '{{ansible_hostname}}'}
  - {name: nextcloud, host: '{{ansible_hostname}}'}
  - {name: gitea, host: '{{ansible_hostname}}'}
  - {name: jenkins, host: '{{ansible_hostname}}'}
  - {name: uptime_kuma, host: '{{ansible_hostname}}'}
  - {name: wiki, host: '{{ansible_hostname}}'}
  - {name: planka, host: '{{ansible_hostname}}'}
- name: Insert rows into domains table
  community.postgresql.postgresql_query:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    query: 'INSERT INTO domains (name, host) VALUES (%s, %s) ON CONFLICT DO NOTHING;'
    positional_args:
    - '{{item.name}}'
    - '{{item.host}}'
  with_items:
  - {name: homelab.net, host: '{{ansible_hostname}}'}
  - {name: nextcloud.homelab.net, host: '{{ansible_hostname}}'}
  - {name: unbound.homelab.net, host: '{{ansible_hostname}}'}
  - {name: gitea.homelab.net, host: '{{ansible_hostname}}'}
  - {name: jenkins.homelab.net, host: '{{ansible_hostname}}'}
  - {name: uptime-kuma.homelab.net, host: '{{ansible_hostname}}'}
  - {name: wiki.homelab.net, host: '{{ansible_hostname}}'}
  - {name: planka.homelab.net, host: '{{ansible_hostname}}'}
  - {name: nas.homelab.net, host: '{{ansible_hostname}}'}
  - {name: bitwarden.homelab.net, host: '{{ansible_hostname}}'}
- name: Insert rows into protocols table
  community.postgresql.postgresql_query:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    query: 'INSERT INTO protocols (name, default_port) VALUES (%s, %s) ON CONFLICT DO NOTHING;'
    positional_args:
    - '{{item.name}}'
    - '{{item.default_port}}'
  with_items:
  - {name: SSH, default_port: 22}
  - {name: DNS, default_port: 53}
  - {name: HTTP, default_port: 80}
  - {name: HTTPS, default_port: 443}
  - {name: POSTGRESQL, default_port: 5432}
- name: Insert rows into connections table
  community.postgresql.postgresql_query:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    query: 'INSERT INTO connections (domain, port, protocol, service) VALUES (%s, %s, %s, %s) ON CONFLICT DO NOTHING;'
    positional_args:
    - '{{item.domain}}'
    - '{{item.port}}'
    - '{{item.protocol}}'
    - '{{item.service}}'
  with_items:
  - {domain: unbound.homelab.net, port: 53, protocol: DNS, service: unbound}
  - {domain: nextcloud.homelab.net, port: 443, protocol: HTTPS, service: nextcloud}
  - {domain: gitea.homelab.net, port: 443, protocol: HTTPS, service: gitea}
  - {domain: jenkins.homelab.net, port: 443, protocol: HTTPS, service: jenkins}
  - {domain: uptime-kuma.homelab.net, port: 443, protocol: HTTPS, service: uptime_kuma}
  - {domain: wiki.homelab.net, port: 443, protocol: HTTPS, service: wiki}
  - {domain: planka.homelab.net, port: 443, protocol: HTTPS, service: planka}

- name: Create dns user
  community.postgresql.postgresql_user:
    login_host: localhost
    login_user: postgres
    login_password: '{{config.postgres_password}}'
    login_db: postgres
    name: dns
    password: '{{config.dns_postgres_password}}'
    state: present
- name: Grant permissions on homelab database to dns user
  community.postgresql.postgresql_privs:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    type: database
    objs: homelab
    privs: CONNECT
    roles: dns
    state: present
- name: Grant permissions on wireguard schema to dns user
  community.postgresql.postgresql_privs:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    type: schema
    objs: wireguard
    privs: USAGE
    roles: dns
    state: present
- name: Grant permissions on hosts and domains tables to dns user
  community.postgresql.postgresql_privs:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    type: table
    objs: hosts,domains
    privs: SELECT
    roles: dns
    state: present
- name: Grant permissions on wireguard.hosts table to dns user
  community.postgresql.postgresql_privs:
    login_host: localhost
    login_user: homelab
    login_password: '{{config.homelab_postgres_password}}'
    db: homelab
    type: table
    objs: hosts
    privs: SELECT
    roles: dns
    schema: wireguard
    state: present
